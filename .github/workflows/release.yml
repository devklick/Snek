name: Release Snek

on:
  push:
    branches:
      - main

jobs:
  release-snek:
    runs-on: ubuntu-latest
    outputs:
      next-release-version: ${{steps.output-next-version-to-github.outputs.NEXT_RELEASE_VERSION}}
      hello-world: ${{steps.output-hello-world-to-github.outputs.HELLO_WORLD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Install Node dependencies
        run: npm install

      - name: Setup .Net
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "7.0.x"

      - name: Install .Net dependencies
        run: dotnet restore

      - name: Run build
        run: dotnet build

      - name: Fetch release version
        id: fetch-next-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --branches "dev" --dry-run

      - name: Log Next Version
        run: |
          echo "release version1: $RELEASE_VERSION"
          echo "release version2: ${{env.RELEASE_VERSION}}"

      - name: Output hello world to Github
        id: output-hello-world-to-github
        run: echo "HELLO_WORLD=hello.world" >> "$GITHUB_OUTPUT"

      - name: Output next version to Github
        id: output-next-version-to-github
        run: echo "NEXT_RELEASE_VERSION=${{env.RELEASE_VERSION}}" >> "$GITHUB_OUTPUT"

      - name: Run publish Windows
        run: dotnet publish -c release -r win-x64 ./Snek.Console -p:Version=${{ env.RELEASE_VERSION }} -o build/win-x64

      - name: ZIP Windows output
        run: cd build/win-x64 && zip -r ../Snek_win-x64.zip * && cd ../..

      - name: Run publish Linux
        run: dotnet publish -c release -r linux-x64 ./Snek.Console -p:Version=${{ env.RELEASE_VERSION }} -o build/linux-x64

      - name: ZIP Linux output
        run: cd build/linux-x64 && zip -r ../Snek_linux-x64.zip * && cd ../..

      - name: Run publish OSX
        run: dotnet publish -c release -r osx-x64 ./Snek.Console -p:Version=${{ env.RELEASE_VERSION }} -o build/osx-x64

      - name: ZIP OSX output
        run: cd build/osx-x64 && zip -r ../Snek_osx-x64.zip * && cd ../..

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --branches dev

  check-next-release:
    needs: release-snek
    runs-on: ubuntu-latest
    steps:
      - name: Log next release version
        env:
          RELEASE_VERSION: ${{needs.release-snek.outputs.next-release-version}}
        run: |
          echo "release version1: $RELEASE_VERSION"
          echo "release version2: ${{needs.release-snek.outputs.next-release-version}}"
  check-hello-world:
    needs: release-snek
    runs-on: ubuntu-latest
    steps:
      - name: Log Hello World
        env:
          HELLO_WORLD: ${{needs.release-snek.outputs.hello-world}}
        run: |
          echo "Says1: $HELLO_WORLD"
          echo "Says2: ${{needs.release-snek.outputs.hello-world}}"

  only-on-next-release:
    needs: release-snek
    runs-on: ubuntu-latest
    if: ${{needs.release-snek.outputs.next-release-version}} != ''
    steps:
      - name: Log next release version if present
        env:
          RELEASE_VERSION: ${{needs.release-snek.outputs.next-release-version}}
        run: |
          echo "release version1: $RELEASE_VERSION"
          echo "release version2: ${{needs.release-snek.outputs.next-release-version}}"

  only-on-hello-world:
    needs: release-snek
    runs-on: ubuntu-latest
    if: ${{needs.release-snek.outputs.hello-world}} != ''
    steps:
      - name: Log next release version if present
        env:
          HELLO_WORLD: ${{needs.release-snek.outputs.hello-world}}
        run: |
          echo "Says1: $HELLO_WORLD"
          echo "Says2: ${{needs.release-snek.outputs.hello-world}}"
